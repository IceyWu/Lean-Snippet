{
  "🌈 Request Demo": {
    "prefix": "lre",
    "body": [
      "// 🌈 数据请求",
      "const getDataLoading = ref(false);",
      "const getData = async (): Promise<void> => {",
      "  if (getDataLoading.value) return;",
      "  getDataLoading.value = true;",
      "  const params = {};",
      "  const { code, msg, result = [] } = await findAllStudents(params);",
      "  if (code === 0 && result) {",
      "    console.log('---数据请求成功---', result);",
      "  } else {",
      "    console.log('---数据请求失败---', msg);",
      "  }",
      "  getDataLoading.value = false;",
      "};"
    ],
    "description": "🌈api request demo with TypeScript"
  },
  "🌈 console.log()": {
    "prefix": "lcl",
    "body": [
      "console.log('🌈-----${TM_CURRENT_LINE/^(.*)lcl//}----- ', ${TM_CURRENT_LINE/^(.*)lcl//}); // "
    ],
    "description": "🌈console.log('🌈-----val-----',val)"
  },
  "🌈 arrow function": {
    "prefix": "laf",
    "body": [
      "const ${1:fnName} = (${2:arg}) => {",
      "  ${3:console.log('🌈-----I am a function ----- ');}",
      "};"
    ],
    "description": "🌈arrow function"
  },
  "🌈 if-else": {
    "prefix": "lif",
    "body": [
      "if (${1:condition}) {",
      "  ${2:console.log('🌈-----if part-----');}",
      "} else {",
      "  ${3:console.log('🌈-----else part-----');}",
      "}"
    ],
    "description": "🌈if-else"
  },
  "🌈 switch-case": {
    "prefix": "lsw",
    "body": [
      "switch (${1:condition}) {",
      "  case ${2:case} :",
      "    ${3:console.log('🌈-----case part-----');}",
      "    break;",
      "  default:",
      "    ${4:console.log('🌈-----default part-----');}",
      "}"
    ],
    "description": "🌈switch-case"
  },
  "🌈 define ref": {
    "prefix": "lref",
    "body": ["const ${1:refName} = ref(${2:val});"],
    "description": "🌈define ref"
  },
  "🌈 define reactive": {
    "prefix": "lrea",
    "body": ["const ${1:reactiveName} = reactive(${2:val});"],
    "description": "🌈define reactive"
  },
  "🌈 define computed": {
    "prefix": "lcom",
    "body": [
      "const ${1:computedName} = computed(() => {",
      "  return ${2:val};",
      "});"
    ],
    "description": "🌈define computed"
  },
  "🌈 define watch": {
    "prefix": "lwa",
    "body": ["watch(${1:watchName}, (val) => {", "  ${2:val}", "});"],
    "description": "🌈define watch"
  },
  "🌈 define watchEffect": {
    "prefix": "lwe",
    "body": ["watchEffect(() => {", "  ${1:val}", "});"],
    "description": "🌈define watchEffect"
  },
  "🌈 define onMounted": {
    "prefix": "lmo",
    "body": ["onMounted(() => {", "  ${1:val}", "});"],
    "description": "🌈define onMounted"
  },
  "🌈 define onBeforeMount": {
    "prefix": "lbm",
    "body": ["onBeforeMount(() => {", "  ${1:val}", "});"],
    "description": "🌈define onBeforeMount"
  },
  "🌈 define onBeforeUnmount": {
    "prefix": "lbu",
    "body": ["onBeforeUnmount(() => {", "  ${1:val}", "});"],
    "description": "🌈define onBeforeUnmount"
  },
  "🌈 define onUnmounted": {
    "prefix": "lun",
    "body": ["onUnmounted(() => {", "  ${1:val}", "});"],
    "description": "🌈define onUnmounted"
  },
  "🌈 code comment": {
    "prefix": "lcc",
    "body": [
      "/**",
      " * @func ${1:fnName}",
      " * @param ${2:arg}",
      " */"
    ],
    "description": "🌈code comment"
  },
   "🌈 vue-hooks-pure request": {
    "prefix": "lvhp",
    "body": [
      "const {",
      "  search,",
      "  onRefresh,",
      "  onLoad,",
      "  result,",
      "} = useRequest(${1:requestApi}, {",
      "  target: 'list',",
      "  getVal: (res) => {",
      "    return res",
      "  },",
      "  listOptions: {",
      "    defaultPageKey: 'page',",
      "    defaultSizeKey: 'size',",
      "    defaultDataKey: 'list',",
      "    defaultPage: -1,",
      "    getTotal: (data: any): number => {",
      "      const total = getObjVal(data, 'data.totalElements', 0);",
      "      return total;",
      "    },",
      "  },",
      "})"
    ],
    "description": "🌈 request by vue-hooks-pure with TypeScript"
  },
  "TypeScript Interface": {
    "prefix": "linterface",
    "body": [
      "interface ${1:InterfaceName} {",
      "  ${2:property}: ${3:type};",
      "}"
    ],
    "description": "🌈 Create a TypeScript interface"
  },
  "TypeScript Type": {
    "prefix": "ltype",
    "body": [
      "type ${1:TypeName} = ${2:type};"
    ],
    "description": "🌈 Create a TypeScript type alias"
  },
  "TypeScript Function": {
    "prefix": "ltsfunc",
    "body": [
      "function ${1:functionName}(${2:param}: ${3:type}): ${4:returnType} {",
      "  ${5:// implementation}",
      "  return ${6:value};",
      "}"
    ],
    "description": "🌈 Create a TypeScript function"
  },
  "TypeScript Arrow Function": {
    "prefix": "ltsarrow",
    "body": [
      "const ${1:functionName} = (${2:param}: ${3:type}): ${4:returnType} => {",
      "  ${5:// implementation}",
      "  return ${6:value};",
      "};"
    ],
    "description": "🌈 Create a TypeScript arrow function"
  },
  "TypeScript Class": {
    "prefix": "lclass",
    "body": [
      "class ${1:ClassName} {",
      "  private ${2:property}: ${3:type};",
      "",
      "  constructor(${4:param}: ${5:type}) {",
      "    this.${2:property} = ${4:param};",
      "  }",
      "",
      "  public ${6:methodName}(): ${7:returnType} {",
      "    ${8:// implementation}",
      "    return ${9:value};",
      "  }",
      "}"
    ],
    "description": "🌈 Create a TypeScript class"
  },
  "TypeScript Enum": {
    "prefix": "lenum",
    "body": [
      "enum ${1:EnumName} {",
      "  ${2:VALUE1} = '${3:value1}',",
      "  ${4:VALUE2} = '${5:value2}',",
      "}"
    ],
    "description": "🌈 Create a TypeScript enum"
  },
  "TypeScript Generic": {
    "prefix": "lgeneric",
    "body": [
      "function ${1:functionName}<${2:T}>(${3:param}: ${2:T}): ${2:T} {",
      "  ${4:// implementation}",
      "  return ${3:param};",
      "}"
    ],
    "description": "🌈 Create a TypeScript generic function"
  },
  "TypeScript Import": {
    "prefix": "limport",
    "body": [
      "import { ${1:export} } from '${2:module}';"
    ],
    "description": "🌈 TypeScript import statement"
  },
  "TypeScript Export": {
    "prefix": "lexport",
    "body": [
      "export { ${1:export} } from '${2:module}';"
    ],
    "description": "🌈 TypeScript export statement"
  },
  "Try Catch Block": {
    "prefix": "ltrycatch",
    "body": [
      "try {",
      "  ${1:// code that may throw}",
      "} catch (error: unknown) {",
      "  console.error('🚨 Error:', error);",
      "  ${2:// error handling}",
      "}"
    ],
    "description": "🌈 Try-catch block with proper TypeScript error handling"
  }
}
