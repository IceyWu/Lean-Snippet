{
  "🌈 Request Demo": {
    "prefix": "lre",
    "body": [
      "// 🌈 接口数据请求",
      "const getDataLoading = ref(false);",
      "const getData = async () => {",
      "  if (getDataLoading.value) return;",
      "  getDataLoading.value = true;",
      "  const params = {};",
      "  // to is a function form (@iceywu/utils)",
      "  const [err, res] = await to(apiRequest(params));",
      "  if (res) {",
      "    console.log('🌈-----接口请求成功-----');",
      "    const { code, msg, data = [] } = res || {};",
      "    if (code === 200 && data) {",
      "      console.log('😊-----数据获取成功-----', data);",
      "    } else {",
      "      console.log('😒-----数据获取失败-----', msg);",
      "    }",
      "  }",
      "  if (err) {",
      "    console.log('❗-----接口请求失败-----');",
      "  }",
      "  getDataLoading.value = false;",
      "};"
    ],
    "description": "🌈api requset demo use 'to'"
  },
  "🌈 Request Demo use trycath": {
    "prefix": "lret",
    "body": [
      "// 🌈 接口数据请求",
      "const getDataLoading = ref(false);",
      "const getData = async () => {",
      "  if (getDataLoading.value) return;",
      "  getDataLoading.value = true;",
      "  const params = {};",
      "  try {",
      "    const { code, msg, data = [] } =({} = await apiRequest(params))",
      "    console.log('🌈-----接口请求成功-----');",
      "    if (code === 200 && data) {",
      "      console.log('😊-----数据获取成功-----', data);",
      "    } else {",
      "      console.log('😒-----数据获取失败-----', msg);",
      "    }",
      "  } catch (err) {",
      "    console.log('❗-----接口请求失败-----');",
      "  }",
      "  getDataLoading.value = false;",
      "};"
    ],
    "description": "🌈api requset demo use try catch"
  },
  "🌈 console.log()": {
    "prefix": "lcl",
    "body": [
      "console.log('🌈-----${TM_CURRENT_LINE/^(.*)lcl//}----- ', ${TM_CURRENT_LINE/^(.*)lcl//}); // "
    ],
    "description": "🌈console.log('🌈-----val-----',val)"
  },
  "🌈 arrow function": {
    "prefix": "laf",
    "body": [
      "const ${1:fnName} = (${2}) => {",
      "  ${3:console.log('💗${1:fnName}---------->', ${2});}",
      "};"
    ],
    "description": "🌈arrow function"
  },
  "🌈 if-else": {
    "prefix": "lif",
    "body": [
      "if (${1:condition}) {",
      "  ${2:console.log('🌈-----if part-----');}",
      "} else {",
      "  ${3:console.log('🌈-----else part-----');}",
      "}"
    ],
    "description": "🌈if-else"
  },
  "🌈 switch-case": {
    "prefix": "lsw",
    "body": [
      "switch (${1:condition}) {",
      "  case ${2:case} :",
      "    ${3:console.log('🌈-----case part-----');}",
      "    break;",
      "  default:",
      "    ${4:console.log('🌈-----default part-----');}",
      "}"
    ],
    "description": "🌈switch-case"
  },
  "🌈 define ref": {
    "prefix": "lref",
    "body": [
      "const ${1:refName} = ref(${2:val});"
    ],
    "description": "🌈define ref"
  },
  "🌈 define reactive": {
    "prefix": "lrea",
    "body": [
      "const ${1:reactiveName} = reactive(${2:val});"
    ],
    "description": "🌈define reactive"
  },
  "🌈 define computed": {
    "prefix": "lcom",
    "body": [
      "const ${1:computedName} = computed(() => {",
      "  return ${2:val};",
      "});"
    ],
    "description": "🌈define computed"
  },
  "🌈 define watch": {
    "prefix": "lwa",
    "body": [
      "watch(${1:watchName}, (val) => {",
      "  ${2:val}",
      "});"
    ],
    "description": "🌈define watch"
  },
  "🌈 define watchEffect": {
    "prefix": "lwe",
    "body": [
      "watchEffect(() => {",
      "  ${1:val}",
      "});"
    ],
    "description": "🌈define watchEffect"
  },
  "🌈 define onMounted": {
    "prefix": "lmo",
    "body": [
      "onMounted(() => {",
      "  ${1:val}",
      "});"
    ],
    "description": "🌈define onMounted"
  },
  "🌈 define onBeforeMount": {
    "prefix": "lbm",
    "body": [
      "onBeforeMount(() => {",
      "  ${1:val}",
      "});"
    ],
    "description": "🌈define onBeforeMount"
  },
  "🌈 define onBeforeUnmount": {
    "prefix": "lbu",
    "body": [
      "onBeforeUnmount(() => {",
      "  ${1:val}",
      "});"
    ],
    "description": "🌈define onBeforeUnmount"
  },
  "🌈 define onUnmounted": {
    "prefix": "lun",
    "body": [
      "onUnmounted(() => {",
      "  ${1:val}",
      "});"
    ],
    "description": "🌈define onUnmounted"
  },
  "🌈 code comment": {
    "prefix": "lcc",
    "body": [
      "/**",
      " * @func ${1:fnName}",
      " * @param ${2:arg}",
      " */"
    ],
    "description": "🌈code comment"
  },
  "🌈 lorem desc": {
    "prefix": "lrem",
    "body": [
      "Lorem ipsum dolor sit amet consecte tur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum"
    ],
    "description": "🌈lorem of englsih"
  },
  "🌈 lorem desc chinese": {
    "prefix": "lremc",
    "body": [
      "䙍㓥䝀䅃㪄䤼䮌䒻䨋䌉㗖䎳㡰䪏。㭤㩟䏻㺖㒓䤘，㝥㘓䯓䳸㗥䄻䤂㛼。㨊䥈㳬㢦㥤䙅䋄㵅䴴䶲䶐㱫㤱㘪䌙䉙䎠䩔㭹㓦䨵㨮䋓㿤㱅㦷。䖊䝻㟷㖝㥣䡤㰥㿊䟂䜤㯯䘐㱳㧎䶍㒒䦘䫀㶤䇄，䞂㰐䢪㲥䪱㹊䴂㜕䙳㯐䱔㙗㘸㐫䏠䍐㓩䔢㵝㙸䬏㜪䏁㽎㕵䏛㬧㪡䆏㤺㑒䬋㝡䋌㯪䫸，㩤䵞䀘䉓䊩㗅䖁㾏䘅㕏䙂。㓥䉙䓶䠧㖘䏪䑐䋷㝕䬺䴫㶐㸲㠈㨑䗒䩶䯕㷹䩧䇠㪡䝞䭊㼯㧐䫆㑒䉣㹣䋇䐼䒚䁹㝈㖰㩜䎄䓨䐋䡸䗣䓰䄃㠰䎙䋾㟋㔅䀎䠰䓣䍙㣪㸳㽨㧊䂗䋮㭮䳛䙊䵓䦌䍄䰃㗗䓓，䐍㤫䚣䩗䣁㠂䳉㣓䊔䱁㩆䀷㞤㠎䐜㫸。㣂㳑䔤䙤㿹㳳䨌㮗㔆䕭㬶䮀㤃㝅䀗䮫㱵䎉㡌䱴䍩㲐䎿㐾㔙䝯䱉㬱䠠㐫，㴊䨾䦜䍙㜈䛔䚰㺗㑱䀛㻞㩢㘧䭰㡚，㰾㧨䖲䉆㾮䟧䁨䪲䇃䌓䬭㞋䰇㧗䎋㥡㑾㖖䤏䋴䧐䱏䣎㖱㒬䬖䤃䌹䑊㜫㵁㥊䩼㓿䖟㳰䇝㭯㓶㑉䶠䴕㘭䞄。㺄㧚㫃䝺㕎㪄㖁㰊䒃䛴䣝䰮䆒䝉䧰䤊㒏䇔㶿䋈㤹㻭䵻䈇䏴䨲㣔䑵㳖䠘，㐀䊘䐗䅾䋈㱊㴞䯍䒝䠛㺩䨦㸋䖫䫵䜑㔵䫅㒣㨛䛄䥃䂕㗹䱂䪢"
    ],
    "description": "🌈lorem of chinese"
  },
  "🌈 lorem desc number": {
    "prefix": "lremn",
    "body": [
      "3111878794548751573111878794548751578731118787945487515787311187879454875157873111878794548751578731118787945487515787311187879454875157873111878794548751578731118787945487515787311187879454875157873111878794548751578731118787945487515787311187879454875157873111878794548751578731118787945487515787311187879454875157873111878794548751578731118787945487515787311187879454875157873111878794548751578731118787945487515787311187879454875157873111878794548751578787"
    ],
    "description": "🌈lorem of number"
  },
  "🌈 vue emit": {
    "prefix": "lvem",
    "body": [
      "const emit = defineEmits(['update:isShow', 'func']);"
    ],
    "description": "🌈vue3 emit"
  },
  "🌈 vue props": {
    "prefix": "lvpr",
    "body": [
      "const props = defineProps({",
      "  isShow: {",
      "    type: Boolean,",
      "    default: false,",
      "  },",
      "});"
    ],
    "description": "🌈vue3 props"
  },
  "🌈 vue defineExpose": {
    "prefix": "lvde",
    "body": [
      "defineExpose({",
      "  func,",
      "});"
    ],
    "description": "🌈vue3 defineExpose"
  },
  "🌈 vue defineModel": {
    "prefix": "lvdm",
    "body": [
      "const ${1:modelName} = defineModel(\"${2:modelName}\", { type: ${3:type}, default: ${4:default} });"
    ],
    "description": "🌈vue3 defineModel"
  },
  "🌈 const tempList use @iceywu/utils": {
    "prefix": "llist",
    "body": [
      "const ${1:tempList} = list(${2:0}, ${3:10}, (index) => {",
      "  return {",
      "    ${4:id}: index,",
      "  };",
      "});"
    ],
    "description": "🌈const tempList use @iceywu/utils"
  },
  "🌈 vue-hooks-pure request": {
    "prefix": "lvhp",
    "body": [
      "const {",
      "  search,",
      "  onRefresh,",
      "  onLoad,",
      "  result,",
      "} = useRequest(${1:requestApi}, {",
      "  target: 'list',",
      "  getVal: (res) => {",
      "    return res",
      "  },",
      "  listOptions: {",
      "    defaultPageKey: 'page',",
      "    defaultSizeKey: 'size',",
      "    defaultDataKey: 'list',",
      "    defaultPage: -1,",
      "    getTotal: (data) => {",
      "      const total = getObjVal(data, 'data.totalElements', 0)",
      "      return total",
      "    },",
      "  },",
      "})"
    ],
    "description": "🌈 request by vue-hooks-pure"
  }
}